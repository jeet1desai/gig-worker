generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  user
  provider
}

enum TIER {
  basic
  advanced
  expert
}

enum BID_STATUS {
  pending
  accepted
  rejected
}

enum PAYMENT_STATUS {
  held
  completed
  refunded
}

enum PAYMENT_REQUEST_STATUS {
  pending
  accepted
  rejected
}

enum CHALLENGED_OUTCOME {
  pending
  provider_won
  user_won
}

enum SUBSCRIPTION_TYPE {
  free
  basic
  pro
}

enum SUBSCRIPTION_STATUS {
  active
  cancelled
}

enum EARN_STATUS {
  in_progress
  completed
}

enum GIG_STATUS {
  open
  requested
  in_progress
  completed
  rejected
}

model User {
  id           BigInt   @id @default(autoincrement())
  first_name   String?
  last_name    String?
  profile_url  String?
  email        String   @unique
  password     String
  role         ROLE     @default(user)
  is_verified  Boolean  @default(false)
  is_banned    Boolean  @default(false)
  sign_up_type String? // e.g., 'google', 'facebook', 'email'
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  profile                 UserProfile?
  user_ban                UserBan?
  subscriptions           Subscription[]
  gigs                    Gig[]
  provider_bids           Bid[]             @relation("ProviderBid")
  user_received_bids      Bid[]             @relation("UserReceivedBid")
  provider_rating         ReviewRating[]    @relation("ProviderRating")
  user_received_rating    ReviewRating[]    @relation("UserReceivedRating")
  payments                Payment[]
  provider_complaints     Complaint[]       @relation("ProviderComplaint")
  user_received_complaint Complaint[]       @relation("UserReceivedComplaint")
  challenged              Challenged[]
  provider_earnings       ProviderEarning[] @relation("ProviderEarning")
  user_spending           ProviderEarning[] @relation("UserSpending")
  sent_messages           Message[]         @relation("Sender")
  received_messages       Message[]         @relation("Receiver")
  notifications           Notification[]
  user_testimonials       Testimonials[]    @relation("UserTestimonials")
  provider_testimonials   Testimonials[]    @relation("ProviderTestimonials")
}

model UserProfile {
  id              BigInt   @id @default(autoincrement())
  user_id         BigInt   @unique
  interests       String[]
  extracurricular String[]
  certifications  String[]
  skills          String[]
  educations      String[]
  badges          Json? // [{role: "", badge: ""}]
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  user User? @relation(fields: [user_id], references: [id])
}

model UserBan {
  id             BigInt    @id @default(autoincrement())
  user_id        BigInt    @unique
  reason         String?
  ban_expires_at DateTime?
  strike_count   Int       @default(0)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  // Relations
  user User? @relation(fields: [user_id], references: [id])
}

model UserRoleLimit {
  id         BigInt            @id @default(autoincrement())
  role       SUBSCRIPTION_TYPE @default(free)
  gig_limit  Int               @default(0)
  bid_limit  Int               @default(0)
  price      Decimal           @default(0.00)
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
}

model Admin {
  id          BigInt   @id @default(autoincrement())
  email       String   @unique
  first_name  String
  last_name   String
  password    String
  profile_url String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model CMS {
  id          BigInt   @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Subscription {
  id                      BigInt              @id @default(autoincrement())
  user_id                 BigInt
  type                    SUBSCRIPTION_TYPE   @default(free)
  amount                  Decimal             @default(0.00)
  status                  SUBSCRIPTION_STATUS
  subscription_expires_at DateTime?
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt

  // Relations
  user User? @relation(fields: [user_id], references: [id])
}

model ProviderEarning {
  id          BigInt      @id @default(autoincrement())
  user_id     BigInt
  provider_id BigInt
  gig_id      BigInt
  amount      Decimal     @default(0.00)
  status      EARN_STATUS @default(in_progress)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  // Relations
  user     User @relation(fields: [user_id], references: [id], name: "UserSpending")
  provider User @relation(fields: [provider_id], references: [id], name: "ProviderEarning")
  gig      Gig  @relation(fields: [gig_id], references: [id])
}

model Gig {
  id           BigInt    @id @default(autoincrement())
  user_id      BigInt
  title        String
  description  String?
  start_date   DateTime?
  end_date     DateTime?
  tier         TIER      @default(basic)
  price_range  Json
  keywords     String[]
  completed_at DateTime?
  thumbnail    String?
  attachments  String[]
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Relations
  user              User              @relation(fields: [user_id], references: [id])
  bids              Bid[]
  review_rating     ReviewRating[]
  payment           Payment[]
  complaint         Complaint?
  pipeline          GigPipeline?
  challenged        Challenged?
  provider_earnings ProviderEarning[]
  messages          Message[]
  Testimonials      Testimonials[]
}

model GigPipeline {
  id         BigInt     @id @default(autoincrement())
  gig_id     BigInt     @unique
  status     GIG_STATUS @default(open)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  // Relations
  gig Gig @relation(fields: [gig_id], references: [id])
}

model Bid {
  id          BigInt     @id @default(autoincrement())
  gig_id      BigInt
  provider_id BigInt
  user_id     BigInt
  proposal    String
  bid_price   Decimal    @default(0.00)
  status      BID_STATUS @default(pending)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  // Relations
  gig      Gig   @relation(fields: [gig_id], references: [id])
  provider User? @relation(fields: [provider_id], references: [id], name: "ProviderBid")
  user     User? @relation(fields: [user_id], references: [id], name: "UserReceivedBid")
}

model ReviewRating {
  id              BigInt   @id @default(autoincrement())
  gig_id          BigInt   @unique
  provider_id     BigInt
  user_id         BigInt
  rating          Int      @default(0)
  rating_feedback String?
  up_vote         Int      @default(0)
  down_vote       Int      @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  gig       Gig        @relation(fields: [gig_id], references: [id])
  provider  User       @relation(fields: [provider_id], references: [id], name: "ProviderRating")
  user      User       @relation(fields: [user_id], references: [id], name: "UserReceivedRating")
  complaint Complaint?
}

model Payment {
  id             BigInt                 @id @default(autoincrement())
  gig_id         BigInt
  provider_id    BigInt
  amount         Decimal
  platform_fee   Decimal
  payment_method String?
  status         PAYMENT_STATUS         @default(held)
  request_status PAYMENT_REQUEST_STATUS @default(pending)
  created_at     DateTime               @default(now())
  updated_at     DateTime               @updatedAt

  // Relations
  gig      Gig  @relation(fields: [gig_id], references: [id])
  provider User @relation(fields: [provider_id], references: [id])
}

model Complaint {
  id                    BigInt   @id @default(autoincrement())
  review_rating_id      BigInt   @unique
  provider_id           BigInt
  user_id               BigInt
  gig_id                BigInt   @unique
  issue_text            String
  suggested_improvement String?
  receiver_response     String?
  is_challenged         Boolean  @default(false)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  // Relations
  review_rating ReviewRating @relation(fields: [review_rating_id], references: [id])
  gig           Gig          @relation(fields: [gig_id], references: [id])
  provider      User         @relation(fields: [provider_id], references: [id], name: "ProviderComplaint")
  user          User         @relation(fields: [user_id], references: [id], name: "UserReceivedComplaint")
  challenged    Challenged?
}

model Challenged {
  id           BigInt             @id @default(autoincrement())
  outcome      CHALLENGED_OUTCOME @default(pending)
  resolution   String?
  gig_id       BigInt             @unique
  complaint_id BigInt             @unique
  provider_id  BigInt
  created_at   DateTime           @default(now())
  updated_at   DateTime           @updatedAt

  // Relations
  complaint Complaint @relation(fields: [complaint_id], references: [id])
  gig       Gig       @relation(fields: [gig_id], references: [id])
  provider  User      @relation(fields: [provider_id], references: [id])
}

model Message {
  id           BigInt   @id @default(autoincrement())
  chat_id      BigInt?
  gig_id       BigInt
  sender_id    BigInt
  receiver_id  BigInt
  message_text String?
  attachment   String?
  read_status  Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  gig      Gig  @relation(fields: [gig_id], references: [id])
  sender   User @relation(fields: [sender_id], references: [id], name: "Sender")
  receiver User @relation(fields: [receiver_id], references: [id], name: "Receiver")
}

model Notification {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  title      String
  message    String?
  is_read    Boolean  @default(false)
  type       String // message, payment, review, gig_update
  related_id BigInt?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user User? @relation(fields: [user_id], references: [id])
}

model Testimonials {
  id               BigInt   @id @default(autoincrement())
  user_id          BigInt
  provider_id      BigInt
  gig_id           BigInt
  testimonial_text String
  is_approved      Boolean  @default(false)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  user     User @relation(fields: [user_id], references: [id], name: "UserTestimonials")
  provider User @relation(fields: [provider_id], references: [id], name: "ProviderTestimonials")
  gig      Gig  @relation(fields: [gig_id], references: [id])
}
